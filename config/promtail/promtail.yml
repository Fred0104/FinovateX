# Promtail配置文件
# 服务器配置
server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: info

# 位置配置
positions:
  filename: /tmp/positions.yaml

# Loki客户端配置
clients:
  - url: http://loki:3100/loki/api/v1/push
    tenant_id: ""
    batchwait: 1s
    batchsize: 1048576
    timeout: 10s
    backoff_config:
      min_period: 500ms
      max_period: 5m
      max_retries: 10
    external_labels:
      cluster: finovatex-dev
      environment: development

# 抓取配置
scrape_configs:
  # Docker容器日志
  - job_name: docker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["logging=promtail"]
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container_name'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'logstream'
      - source_labels: ['__meta_docker_container_label_logging_jobname']
        target_label: 'job'
    pipeline_stages:
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}[T\s]\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|[+-]\d{2}:\d{2})?)[\s]*(?P<level>\w+)[\s]*(?P<message>.*)$'
      - labels:
          level:
          timestamp:
      - timestamp:
          source: timestamp
          format: RFC3339
      - output:
          source: message

  # PostgreSQL日志
  - job_name: postgres
    static_configs:
      - targets:
          - localhost
        labels:
          job: postgres
          service: postgresql
          __path__: /var/log/postgresql/*.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d+\s\w+)\s\[(?P<pid>\d+)\]\s(?P<level>\w+):\s*(?P<message>.*)$'
      - labels:
          level:
          pid:
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05.000 MST'

  # Redis日志
  - job_name: redis
    static_configs:
      - targets:
          - localhost
        labels:
          job: redis
          service: redis
          __path__: /var/log/redis/*.log
    pipeline_stages:
      - regex:
          expression: '^(?P<pid>\d+):(?P<role>\w)\s(?P<timestamp>\d{2}\s\w{3}\s\d{4}\s\d{2}:\d{2}:\d{2}\.\d+)\s(?P<level>[*#.-])\s(?P<message>.*)$'
      - labels:
          level:
          role:
          pid:
      - timestamp:
          source: timestamp
          format: '02 Jan 2006 15:04:05.000'

  # NATS日志
  - job_name: nats
    static_configs:
      - targets:
          - localhost
        labels:
          job: nats
          service: nats
          __path__: /var/log/nats/*.log
    pipeline_stages:
      - regex:
          expression: '^\[(?P<timestamp>\d+)\]\s(?P<timestamp_readable>[^\]]+)\]\s\[(?P<level>\w+)\]\s(?P<message>.*)$'
      - labels:
          level:
      - timestamp:
          source: timestamp
          format: Unix

  # 应用程序日志（通用）
  - job_name: application
    static_configs:
      - targets:
          - localhost
        labels:
          job: application
          service: finovatex
          __path__: /var/log/app/*.log
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            service: service
            trace_id: trace_id
            span_id: span_id
      - labels:
          level:
          service:
          trace_id:
          span_id:
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      - output:
          source: message

  # 系统日志
  - job_name: syslog
    syslog:
      listen_address: 0.0.0.0:1514
      idle_timeout: 60s
      label_structured_data: yes
      labels:
        job: "syslog"
    relabel_configs:
      - source_labels: ['__syslog_message_hostname']
        target_label: 'host'
      - source_labels: ['__syslog_message_app_name']
        target_label: 'app'
      - source_labels: ['__syslog_message_severity']
        target_label: 'level'
    pipeline_stages:
      - regex:
          expression: '^(?P<message>.*)$'
      - output:
          source: message